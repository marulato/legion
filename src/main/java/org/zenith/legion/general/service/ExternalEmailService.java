package org.zenith.legion.general.service;

import org.apache.commons.lang3.exception.ExceptionUtils;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.core.io.ByteArrayResource;
import org.springframework.mail.javamail.JavaMailSenderImpl;
import org.springframework.mail.javamail.MimeMessageHelper;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;
import org.zenith.legion.common.AppContext;
import org.zenith.legion.common.consts.AppConsts;
import org.zenith.legion.common.utils.ConfigUtils;
import org.zenith.legion.common.utils.StringUtils;
import org.zenith.legion.common.utils.ValidationUtils;
import org.zenith.legion.general.dao.ExternalEmailDAO;
import org.zenith.legion.general.entity.Document;
import org.zenith.legion.general.entity.EmailEntity;
import org.zenith.legion.general.entity.FailedEmail;

import javax.mail.internet.MimeMessage;
import java.nio.charset.StandardCharsets;
import java.util.Arrays;
import java.util.Date;
import java.util.List;

@Service
public class ExternalEmailService {

    private JavaMailSenderImpl mailSender;
    private ExternalEmailDAO externalEmailDAO;
    private FileNetService fileNetService;

    private static final Logger log = LoggerFactory.getLogger(ExternalEmailService.class);

    @Autowired
    public ExternalEmailService(
            JavaMailSenderImpl mailSender,
            ExternalEmailDAO externalEmailDAO,
            FileNetService fileNetService) {

        this.mailSender = mailSender;
        this.externalEmailDAO = externalEmailDAO;
        this.fileNetService = fileNetService;
    }

    public static String getRecipients(String[] address) {
        StringBuilder recipients = new StringBuilder();
        if (address != null) {
            for (String to : address) {
                recipients.append(to).append(";");
            }
            if (recipients.length() > 0) {
                recipients.deleteCharAt(recipients.lastIndexOf(";"));
            }
        }
        return recipients.toString();
    }

/*    @Transactional(rollbackFor = Exception.class)
    public void saveFailedEmail(String sentFrom, String[] sentTo, String[] cc,
                                String subject, String content, String attachFileName,
                                byte[] attachment, Exception e) throws Exception {
        FailedEmail failedEmail = new FailedEmail();
        failedEmail.setSentFrom(sentFrom);
        failedEmail.setSubject(subject);
        failedEmail.setSentTo(getRecipients(sentTo));
        failedEmail.setFailedTimes(1);
        failedEmail.setStatus(AppConsts.EMIAL_STATUS_NOT_SENT);
        failedEmail.setLastFailedTime(new Date());
        failedEmail.setCc(getRecipients(cc));
        failedEmail.setContent(content.getBytes(StandardCharsets.UTF_8));
        failedEmail.setFailedReason(ExceptionUtils.getRootCauseMessage(e));
        if (attachment != null) {
            failedEmail.setIsHasAttachment(AppConsts.YES);
        }
        saveFailedEmail(failedEmail);
        Document document = new Document();
        document.setCategory(AppConsts.CM_DOC_CAT_SYS_EMAIL);
        document.setVersion(0);
        document.setDocType(AppConsts.CM_DOC_TYPE_USER_ATTACHMENT);
        document.setReferenceId(failedEmail.getFailedEmailId());
        document.setReferenceTbl(FailedEmail.TABLE_NAME);
        document.setIsAutoGenerated(AppConsts.YES);
        document.setG
        fileNetService.saveToFileNet(FileNetService.getEmailStoragePath(failedEmail.getSentFrom()), attachFileName, attachment);
    }*/

    public void sendEmail(String sentFrom, String[] sentTo, String[] cc, String subject,
                          String content, String attachFileName, byte[] attachment) throws Exception {
        if (sentTo == null || sentTo.length == 0 ||
                (StringUtils.isEmpty(subject) && StringUtils.isEmpty(content) && attachment == null)) {
            return;
        }
        try {
            MimeMessage mimeMessage = mailSender.createMimeMessage();
            MimeMessageHelper mimeMessageHelper = new MimeMessageHelper(mimeMessage, true);
            if (StringUtils.isNotBlank(sentFrom)) {
                mimeMessageHelper.setFrom(sentFrom);
            } else {
                mimeMessageHelper.setFrom(ConfigUtils.get("legion.server.mail.host"));
            }
            List<String> sentToList = Arrays.asList(sentTo);
            for (int i = 0; i < sentTo.length; i++) {
                if (!ValidationUtils.isValidEmail(sentTo[i])) {
                    sentToList.remove(i);
                    log.warn("Invalid email address [" + sentTo[i] + "], will NOT send email to this address.");
                }
            }
            mimeMessageHelper.setTo(sentToList.toArray(new String[0]));
            if (cc != null && cc.length > 0) {
                List<String> ccList = Arrays.asList(cc);
                for (int i = 0; i < cc.length; i++) {
                    if (!ValidationUtils.isValidEmail(cc[i])) {
                        ccList.remove(i);
                        log.warn("Invalid email address [" + cc[i] + "], will NOT send email to this address.");
                    }
                }
                mimeMessageHelper.setCc(ccList.toArray(new String[0]));
            }
            if (StringUtils.isNotBlank(subject)) {
                mimeMessageHelper.setSubject(subject);
            } else {
                mimeMessageHelper.setSubject("(No Subject)");
            }
            if (StringUtils.isNotBlank(content)) {
                mimeMessageHelper.setText(content, true);
            } else {
                mimeMessageHelper.setText("(No Content)");
            }
            if (attachment != null) {
                mimeMessageHelper.addAttachment(attachFileName, new ByteArrayResource(attachment));
            }
            mailSender.send(mimeMessage);
        } catch (Exception e) {
            log.error("Email sent FAILED", e);
            //saveFailedEmail(sentFrom, sentTo, cc, subject, content, attachFileName, attachment, e);
            throw e;
        }

    }

    public void sendEmail(EmailEntity emailEntity) throws Exception {
        if (emailEntity != null) {
            String[] sentTo = emailEntity.getSentTo().split(";");
            String[] ccTo = emailEntity.getCc().split(";");
            sendEmail(emailEntity.getSentFrom(), sentTo, ccTo, emailEntity.getSubject(),
                    new String(emailEntity.getContent()), emailEntity.getAttachFileName(), emailEntity.getAttachment());
        }
    }

    public void saveFailedEmail(FailedEmail failedEmail) {
        if (failedEmail != null) {
            failedEmail.createAuditValues(AppContext.getAppContextFromCurrentThread());
            externalEmailDAO.saveFailedEmail(failedEmail);
        }
    }
}
